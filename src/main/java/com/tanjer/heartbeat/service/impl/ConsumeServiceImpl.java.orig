package com.tanjer.heartbeat.service.impl;


import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.stream.Collectors;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.tanjer.heartbeat.requestDTO.ConsumeCancelServiceRequestDTO;
import com.tanjer.heartbeat.requestDTO.ConsumeServiceRequestDTO;
import com.tanjer.heartbeat.service.ConsumeSaleService;
<<<<<<< HEAD
import com.tanjer.heartbeat.wsgenfile.test.consumption.consumecancelservice.ConsumeCancelServiceResponse;
import com.tanjer.heartbeat.wsgenfile.test.consumption.consumecancelservice.HConsumeCancelService;
=======
import com.tanjer.heartbeat.wsgenfile.test.consumption.consumeservice.ConsumeService;
import com.tanjer.heartbeat.wsgenfile.test.consumption.consumeservice.ConsumeServiceRequest;
>>>>>>> master
import com.tanjer.heartbeat.wsgenfile.test.consumption.consumeservice.ConsumeServiceResponse;
import com.tanjer.heartbeat.wsgenfile.test.consumption.consumeservice.Product;
import com.tanjer.heartbeat.wsgenfile.test.consumption.consumeservice.ServiceError;


@Service
public class ConsumeServiceImpl implements ConsumeSaleService{
	
	private static final Logger logger = LoggerFactory.getLogger(ConsumeServiceImpl.class);
	
	@Autowired
<<<<<<< HEAD
	private HConsumeService hConsumeService;
	
	@Autowired
	private HConsumeCancelService hConsumeCancelService;
	
	@Autowired
	private HDeactivationService hDeactivationService;
	
	@Autowired
	private HDeactivationCancelService hDeactivationCancelService;
=======
	private ConsumeService consumeService;
>>>>>>> master
	
	@Override
	public ConsumeServiceResponse consumeServiceRes(ConsumeServiceRequestDTO dto) {

		ConsumeServiceRequest request = mapToSoapRequest(dto);
		ConsumeServiceResponse response = null;
		try {
			response =  consumeService.notifyConsume(request);
		} catch (ServiceError e) {
			e.printStackTrace();
		}
			return response;
	}
	
	@Override
	public ConsumeCancelServiceResponse consumeCancelServiceRes(ConsumeCancelServiceRequestDTO dto) {
		logger.info("consumeCancelServiceRes Processing started");
		ConsumeCancelServiceResponse response = hConsumeCancelService.consumeCancelServiceThirdParyCall(dto);
		return response;
	}
	
	@Override
	public DeactivationServiceResponse deactivateServiceRes(DeactivationServiceRequestDTO dto) {
		logger.info("deactivateServiceRes Processing started");
		DeactivationServiceResponse response = hDeactivationService.deactivationServiceThirdParyCall(dto);
		return response;
	}

		return request;
		
	}
	public XMLGregorianCalendar convertToXMLGregorianCalendar(String dateStr) {
		try {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date date = sdf.parse(dateStr);
			GregorianCalendar gregorianCalendar = new GregorianCalendar();
			gregorianCalendar.setTime(date);
			return DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianCalendar);
		} catch (Exception e) {
			throw new RuntimeException("Error converting date: " + e.getMessage(), e);
		}
	}
}
